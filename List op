#include <cstdlib>
#include <iostream>
#include <sstream>
#include <string>
#include "Celula.h"
#include "ListaLigada.h"

using namespace std;

//Construtor so' cria os ponteiros sentinelas valendo NULL
ListaLigada::ListaLigada() {
	prim = NULL;
	ult = NULL;
	qtdCelulas = 0;
}

bool ListaLigada::vazia() {
	return prim == NULL;
}

int ListaLigada::tamanho() {
	return this->qtdCelulas;
}

char ListaLigada::primeiro() {
    if (prim != NULL)
	    return prim->getInfo();
	else
	    return -1;
}

char ListaLigada::ultimo() {
    if (ult != NULL)
	    return ult->getInfo();
	else
	    return -1;
}

void ListaLigada::insereInicio(char i)
{
	if (vazia()==true)
  {
    Celula * c = new Celula(i);
	  c->setProx(prim);
	  c->setAnt(NULL);
	  prim = c;
    ult = c;
    qtdCelulas++;
  }
  else
  {
    Celula * c = new Celula(i);
    c->setProx(prim);
    c->setAnt(NULL);
    prim = c;
    qtdCelulas++;
  }
}

void ListaLigada::insereFinal(char i)
{

  if(vazia() == true)
  {
    Celula * c = new Celula(i);
	  c->setProx(prim);
	  c->setAnt(NULL);
	  prim = c;
    ult = c;
    qtdCelulas++;
  }
  else
  {
    Celula * c = new Celula(i);
    c->setAnt(ult);
    c->setProx(NULL);
    ult->setProx(c);
    ult = c;
    qtdCelulas++;
  }
}

void ListaLigada::imprime() {
	Celula * cursor = prim;
	cout << "[ ";
	while (cursor != NULL) {
		cout << cursor->getInfo() << "";
		cursor = cursor->getProx();
	}
	cout << "]\n";
}

string ListaLigada::insereEmN(Celula * c, int pos)
{
	stringstream ss;

	while (true)
  {

		if (pos < 1)
    {
			ss << "A posicao deve ser maior ou igual a 1";
			break;
		}

		if (pos > qtdCelulas + 1)
    {
			ss << "Nao existe esta posicao. A fila esta com " << qtdCelulas << " elemento(s)";
			break;
		}

		if (pos == 1)
    {
			insereInicio(c->getInfo()); // o metodo insereInicio ja estava implementado; aqui foi feita uma adaptacao.
			ss << "Inserido no' inicio";
			break;
		}

    if (pos == qtdCelulas + 1)
    {
      insereFinal(c->getInfo());
      ss << "Inserido no' final";
      break;
    }

		Celula * cursor = this->prim;
		for (int i = 1; i < pos - 1; i++)
    {
			cursor = cursor->getProx();
		}

		c->setProx(cursor->getProx());
		c->setAnt(cursor);
		cursor->setProx(c);
		
		qtdCelulas++;

		//ss << "Inserido na posicao " << pos;

		break;
	}
	return ss.str();
}

string ListaLigada::excluiEmN(int pos)
{
 	stringstream ss;

	while (true)
  {
    if (pos < 1)
    {
      ss << "A posicao deve ser maior ou igual a 1";
      break;
    }

    if (pos > qtdCelulas + 1)
    {
      ss << "Nao existe esta posicao. A fila esta com " << qtdCelulas << " elemento(s)";
      break;
    }

    if (pos == 1)
    {
      Celula * cursorPrim = this->prim;
			prim = cursorPrim->getProx();
      if (prim->getProx()==NULL) {
        delete prim;
      }
      else {
			delete cursorPrim;
      prim->setAnt(NULL);
      }
			qtdCelulas--;
			ss << "O primeiro no' foi excluido";
			break;
    }

    if (pos == qtdCelulas)
    {
      Celula * cursorUlt = this->ult;
      ult = cursorUlt->getAnt();
      if (ult->getAnt()==NULL) {
        delete ult;
      }
      else {
      delete cursorUlt;
      ult->setProx(NULL);
      qtdCelulas--;
      ss << "O ultimo no' foi excluido";
      break;
      }
    }

    Celula * cursor1 = this->prim;
    for (int i = 1; i < pos - 1; i++)
    {
      cursor1 = cursor1->getProx();
    }
    
    Celula * cursor2 = this->prim;
    for (int j = 1; j < pos; j++)
    {
      cursor2 = cursor2->getProx();
    }

    Celula * cursor3 = this->prim;
    for (int k = 1; k < pos + 1; k++)
    {
      cursor3 = cursor3->getProx();
    }

    cursor1->setProx(cursor3);
    cursor3->setAnt(cursor1);

    delete cursor2;

    qtdCelulas--;

    //ss << "O no' da pos " << pos << " foi excluido.";
    break;
  }
  return ss.str();
}

int ListaLigada::contaPalavra(string w) {
  int cont, i, ver; 
  cont = ver = i = 0;
  Celula * aux = this->prim;
  
  while (aux != NULL) {
      if (aux->getInfo() == w[i]) {
        ver++;
        i++;
      }
      else if (aux->getInfo() != w[i]) {
        i = 0;
        ver = 0;
      }
      if (ver == w.size()) {
        cont++;
      }
    aux = aux->getProx();
  }

  return cont;
}

void ListaLigada::trocaPalavra(string w1, string w2) {
  int i, j, ver, pos, p, pj;
  i = j = ver = 0;
  pos = 1;

  Celula * aux = this->prim;

  while (aux != NULL) { 
    Celula * c = new Celula(w2[j]);
    if (aux->getInfo() == w1[i]) {
      if (aux->getInfo() == w2[j]) {
        i++;
        j++;
        ver++;
      }
      else {
        p = pos;
        pj = j;
        i++;
        j++;
        ver++;
      }
    }
    else if (aux->getInfo() != w1[i]) {
      i = 0;
      j = 0;
      ver = 0;
    }
    if (i > w2.size()){
      for (j=j-1;j<w1.size();j++) {
          excluiEmN(pos);
      }
    }
     if (j > w1.size()) {
      Celula * c = new Celula(w2[i]);
      for (i=i-1;i<w2.size();i++) {
        insereEmN(c,pos);
      }
    }
    if (ver == w1.size()) {
      Celula * c = new Celula(w2[pj]);
      excluiEmN(p);
      insereEmN(c,p);
    }
    pos++;
    aux = aux->getProx();
  }
  imprime();
}

void ListaLigada::imprimechar() {
	Celula * cursor = prim;
	cout << "[ ";
	while (cursor != NULL) {
		cout << cursor->getInfo() << ",";
		cursor = cursor->getProx();
	}
	cout << "]\n";
}

FILE * ListaLigada::salva(FILE * f) {
  Celula * aux = this->prim;
  while (aux != NULL) {
    putc(aux->getInfo(), f);
    aux = aux->getProx();
  }
  return f;
}
